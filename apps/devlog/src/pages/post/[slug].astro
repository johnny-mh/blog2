---
import type { FrontMatter } from '#/types'
import type { GetStaticPaths } from 'astro'

import { getPosts } from '#/collection'
import { Comment } from '#/components/Comment'
import Pager from '#/components/Pager.astro'
import PostHeader from '#/components/PostHeader.astro'
import { TOC } from '#/components/TOC'
import Layout from '#/layouts/Layout.astro'
import '#/styles/markdown-content.scss'

export const getStaticPaths = (async () => {
  const posts = await getPosts()

  const list = posts.map((post, idx) => {
    const prev = posts[idx - 1]
    const next = posts[idx + 1]

    return {
      next: next?.path ? `/post/${next.path}` : null,
      post,
      prev: prev?.path ? `/post/${prev.path}` : null,
    }
  })

  return await Promise.all(
    list.map(
      ({
        next,
        post: {
          path,
          rendered: { Content, headings, remarkPluginFrontmatter: frontmatter },
        },
        prev,
      }) => ({
        params: { slug: path },
        props: {
          Content,
          frontmatter,
          headings,
          next,
          prev,
        },
      })
    )
  )
}) satisfies GetStaticPaths

const { Content, frontmatter, headings, next, prev } = Astro.props
---

<Layout frontmatter={frontmatter}>
  <div class="wrapper">
    <div class="content">
      <PostHeader frontmatter={frontmatter as FrontMatter} />
      <input
        data-frontmatter
        type="hidden"
        value={JSON.stringify(frontmatter)}
      />

      <div class="markdown-content">
        <Content />
      </div>

      <Pager next={next} prev={prev} />

      <Comment client:visible={true} client:only="react" />
    </div>

    <div class="toc">
      <TOC client:visible={true} headings={headings} client:only="react" />
    </div>
  </div>
</Layout>

<style lang="scss">
  .wrapper {
    display: flex;
    position: relative;
  }

  .content {
    max-width: 736px;
    flex-grow: 0;
  }

  .toc {
    width: 300px;
    margin-right: -100%;
  }

  @media (max-width: 1388px) {
    .toc {
      display: none;
    }
  }
</style>
<script>
  import mediumZoom from 'medium-zoom/dist/pure'
  import 'medium-zoom/dist/style.css'

  function invokeMediumZoom() {
    mediumZoom('.markdown-content img', { background: 'var(--bg-color)' })
  }

  invokeMediumZoom()
  document.addEventListener('astro:after-swap', invokeMediumZoom)
</script>
